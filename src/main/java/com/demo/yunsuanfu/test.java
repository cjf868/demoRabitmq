package com.demo.yunsuanfu;

/**
 * @ClassName test
 * @Description TODO
 * @Author Administrator
 * @Date 2019/5/12 0:41
 * @Version 1.0
 */
public class test {


    public static void main(String[] args) {

        /**
         * Java>>与>>>的区别
         * >>：带符号右移。正数右移高位补0，负数右移高位补1。比如：
         * 4 >> 1，结果是2；-4 >> 1，结果是-2。-2 >> 1，结果是-1。
         */
        System.out.println(4>>1);
        System.out.println(-4>>1);



        /**
         * >>>：无符号右移。无论是正数还是负数，高位通通补0。
         *
         * 对于正数而言，>>和>>>没区别。
         *
         * 对于负数而言，-2 >>> 1，结果是2147483647（Integer.MAX_VALUE），-1 >>> 1，结果是2147483647（Integer.MAX_VALUE）。
         *
         * 以下代码可以判断两个数的符号是否相等
         *
         * return ((a >> 31) ^ (b >> 31)) == 0;
         */
        System.out.println(2>>>1);
        System.out.println(-2>>>1);


        /**
         * <<(向左位移) 针对二进制，转换成二进制后向左移动3位，后面用0补齐
         * 2 -> 10 ,左移3，右边补3个0 ，10000 =16
         */
        System.out.println("左移"+(2<<3));

        /**
         * >>(向右位移) 针对二进制，转换成二进制后向右移动3位，
         *  16 -> 10000 ,右移3，右边去3个0 ， 结果10 = 2；
         *  右移最新为0
         */
        System.out.println("右移"+(16>>3));

        /**
         * 2.二进制转十进制
         *
         * 计算也很简单，比如8的二进制表示位00001000，去掉补齐的高位就是1000.此时从个位开始计算2的幂（个位是0，依次往后推）乘以对应位数上的数，然后得到的值想加
         *
         * 于是有了，（2的0次幂）*0+（2的1次幂）*0+（2的2次幂）*0+（2的3次幂）*1 = 8
         *
         * 代码实现，直接调用Integer.parseInt("",2);
         */
        System.out.println(Integer.parseInt("1000",2));

/**
 * 3.位异或运算（^）
 * 运算规则是：两个数转为二进制，然后从高位开始比较，如果相同则为0，不相同则为1。
 * 比如：8^11.
 * 8转为二进制是1000，11转为二进制是1011.从高位开始比较得到的是：0011.然后二进制转为十进制，就是Integer.parseInt("0011",2)=3;
 */
        System.out.println(3 ^ 9);
        System.out.println(8 ^ 11);
        System.out.println(8 ^ 12);
        System.out.println(7 ^ 11);
        System.out.println(7 ^ 12);


        /**
         * 4.位与运算符（&）
         *
         * 运算规则：两个数都转为二进制，然后从高位开始比较，如果两个数都为1则为1，否则为0。
         *
         * 比如：129&128.
         *
         * 129转换成二进制就是10000001，128转换成二进制就是10000000。从高位开始比较得到，得到10000000，即128.
         */

        System.out.println(129&128);

        /**
         * 5.位或运算符（|）
         *
         * 运算规则：两个数都转为二进制，然后从高位开始比较，两个数只要有一个为1则为1，否则就为0。
         *
         * 比如：129|128.
         *
         * 129转换成二进制就是10000001，128转换成二进制就是10000000。从高位开始比较得到，得到10000001，即129.
         */

        System.out.println(129|128);

        /**
         * 6.位非运算符（~）
         *
         * 运算规则：如果位为0，结果是1，如果位为1，结果是0.
         *
         * 比如：~37
         *
         * 在Java中，所有数据的表示方法都是以补码的形式表示，如果没有特殊说明，Java中的数据类型默认是int,int数据类型的长度是8位，一位是四个字节，就是32字节，32bit.
         *
         * 8转为二进制是100101.
         *
         * 补码后为： 00000000 00000000 00000000 00100101
         *
         * 取反为：    11111111 11111111 11111111 11011010
         *
         * 因为高位是1，所以原码为负数，负数的补码是其绝对值的原码取反，末尾再加1。
         *
         * 因此，我们可将这个二进制数的补码进行还原： 首先，末尾减1得反码：11111111 11111111 11111111 11011001 其次，将各位取反得原码：
         *
         * 00000000 00000000 00000000 00100110，此时二进制转原码为38
         *
         * 所以~37 = -38.
         */

        System.out.println(~37);
    }


}
